// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/lightstep/lightstep-tracer-common/tmpgen/metrics.proto

/*
Package metricspb is a generated protocol buffer package.

It is generated from these files:
	github.com/lightstep/lightstep-tracer-common/tmpgen/metrics.proto

It has these top-level messages:
	MetricPoint
	IngestRequest
	IngestResponse
*/
package metricspb // import "github.com/lightstep/lightstep-tracer-common/golang/protobuf/metricspb"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Kind indicates the semantics of the points.
type MetricKind int32

const (
	MetricKind_INVALID_METRIC_KIND MetricKind = 0
	MetricKind_DELTA               MetricKind = 1
	MetricKind_GAUGE               MetricKind = 2
)

var MetricKind_name = map[int32]string{
	0: "INVALID_METRIC_KIND",
	1: "DELTA",
	2: "GAUGE",
}
var MetricKind_value = map[string]int32{
	"INVALID_METRIC_KIND": 0,
	"DELTA":               1,
	"GAUGE":               2,
}

func (x MetricKind) String() string {
	return proto.EnumName(MetricKind_name, int32(x))
}
func (MetricKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MetricPoint struct {
	Kind          MetricKind        `protobuf:"varint,1,opt,name=kind,enum=lightstep.metrics.MetricKind" json:"kind,omitempty"`
	TimeSeriesKey string            `protobuf:"bytes,2,opt,name=time_series_key,json=timeSeriesKey" json:"time_series_key,omitempty"`
	Labels        map[string]string `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Types that are valid to be assigned to Value:
	//	*MetricPoint_Uint
	//	*MetricPoint_Float
	Value isMetricPoint_Value `protobuf_oneof:"value"`
}

func (m *MetricPoint) Reset()                    { *m = MetricPoint{} }
func (m *MetricPoint) String() string            { return proto.CompactTextString(m) }
func (*MetricPoint) ProtoMessage()               {}
func (*MetricPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isMetricPoint_Value interface {
	isMetricPoint_Value()
}

type MetricPoint_Uint struct {
	Uint uint64 `protobuf:"varint,4,opt,name=uint,oneof"`
}
type MetricPoint_Float struct {
	Float float64 `protobuf:"fixed64,5,opt,name=float,oneof"`
}

func (*MetricPoint_Uint) isMetricPoint_Value()  {}
func (*MetricPoint_Float) isMetricPoint_Value() {}

func (m *MetricPoint) GetValue() isMetricPoint_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MetricPoint) GetKind() MetricKind {
	if m != nil {
		return m.Kind
	}
	return MetricKind_INVALID_METRIC_KIND
}

func (m *MetricPoint) GetTimeSeriesKey() string {
	if m != nil {
		return m.TimeSeriesKey
	}
	return ""
}

func (m *MetricPoint) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetricPoint) GetUint() uint64 {
	if x, ok := m.GetValue().(*MetricPoint_Uint); ok {
		return x.Uint
	}
	return 0
}

func (m *MetricPoint) GetFloat() float64 {
	if x, ok := m.GetValue().(*MetricPoint_Float); ok {
		return x.Float
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MetricPoint) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MetricPoint_OneofMarshaler, _MetricPoint_OneofUnmarshaler, _MetricPoint_OneofSizer, []interface{}{
		(*MetricPoint_Uint)(nil),
		(*MetricPoint_Float)(nil),
	}
}

func _MetricPoint_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MetricPoint)
	// value
	switch x := m.Value.(type) {
	case *MetricPoint_Uint:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Uint))
	case *MetricPoint_Float:
		b.EncodeVarint(5<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.Float))
	case nil:
	default:
		return fmt.Errorf("MetricPoint.Value has unexpected type %T", x)
	}
	return nil
}

func _MetricPoint_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MetricPoint)
	switch tag {
	case 4: // value.uint
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &MetricPoint_Uint{x}
		return true, err
	case 5: // value.float
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &MetricPoint_Float{math.Float64frombits(x)}
		return true, err
	default:
		return false, nil
	}
}

func _MetricPoint_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MetricPoint)
	// value
	switch x := m.Value.(type) {
	case *MetricPoint_Uint:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Uint))
	case *MetricPoint_Float:
		n += proto.SizeVarint(5<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type IngestRequest struct {
	IdempotencyKey string                      `protobuf:"bytes,1,opt,name=idempotency_key,json=idempotencyKey" json:"idempotency_key,omitempty"`
	ReporterId     uint64                      `protobuf:"varint,2,opt,name=reporter_id,json=reporterId" json:"reporter_id,omitempty"`
	Labels         map[string]string           `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Start          *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=start" json:"start,omitempty"`
	Duration       *google_protobuf.Duration   `protobuf:"bytes,5,opt,name=duration" json:"duration,omitempty"`
	Points         []*MetricPoint              `protobuf:"bytes,6,rep,name=points" json:"points,omitempty"`
}

func (m *IngestRequest) Reset()                    { *m = IngestRequest{} }
func (m *IngestRequest) String() string            { return proto.CompactTextString(m) }
func (*IngestRequest) ProtoMessage()               {}
func (*IngestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IngestRequest) GetIdempotencyKey() string {
	if m != nil {
		return m.IdempotencyKey
	}
	return ""
}

func (m *IngestRequest) GetReporterId() uint64 {
	if m != nil {
		return m.ReporterId
	}
	return 0
}

func (m *IngestRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *IngestRequest) GetStart() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *IngestRequest) GetDuration() *google_protobuf.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *IngestRequest) GetPoints() []*MetricPoint {
	if m != nil {
		return m.Points
	}
	return nil
}

type IngestResponse struct {
}

func (m *IngestResponse) Reset()                    { *m = IngestResponse{} }
func (m *IngestResponse) String() string            { return proto.CompactTextString(m) }
func (*IngestResponse) ProtoMessage()               {}
func (*IngestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*MetricPoint)(nil), "lightstep.metrics.MetricPoint")
	proto.RegisterType((*IngestRequest)(nil), "lightstep.metrics.IngestRequest")
	proto.RegisterType((*IngestResponse)(nil), "lightstep.metrics.IngestResponse")
	proto.RegisterEnum("lightstep.metrics.MetricKind", MetricKind_name, MetricKind_value)
}

func init() {
	proto.RegisterFile("github.com/lightstep/lightstep-tracer-common/tmpgen/metrics.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0x5d, 0x27, 0xd0, 0xb1, 0x9a, 0x86, 0xa5, 0x02, 0x37, 0x12, 0x25, 0x0a, 0x12, 0x44,
	0x15, 0xb5, 0x4b, 0x10, 0x88, 0x8f, 0x53, 0x42, 0xa2, 0xd6, 0x4a, 0x5a, 0x45, 0x6e, 0xe0, 0xc0,
	0xc5, 0x72, 0xec, 0xad, 0xbb, 0xaa, 0xbd, 0x6b, 0x76, 0xd7, 0x48, 0xf9, 0x33, 0x1c, 0xf8, 0xa3,
	0x20, 0xaf, 0x9d, 0x26, 0xb4, 0x85, 0x0b, 0xb7, 0xf9, 0x78, 0x33, 0xf3, 0xfc, 0xde, 0x1a, 0xfa,
	0x31, 0x91, 0x97, 0xf9, 0xdc, 0x0e, 0x59, 0xea, 0x24, 0x24, 0xbe, 0x94, 0x42, 0xe2, 0x6c, 0x15,
	0x1d, 0x4a, 0x1e, 0x84, 0x98, 0x1f, 0x86, 0x2c, 0x4d, 0x19, 0x75, 0x64, 0x9a, 0xc5, 0x98, 0x3a,
	0x29, 0x96, 0x9c, 0x84, 0xc2, 0xce, 0x38, 0x93, 0x0c, 0x3d, 0xb8, 0x46, 0xdb, 0x55, 0xa3, 0xb5,
	0x1f, 0x33, 0x16, 0x27, 0xd8, 0x51, 0x80, 0x79, 0x7e, 0xe1, 0x44, 0x39, 0x0f, 0x24, 0x61, 0xb4,
	0x1c, 0x69, 0x3d, 0xbd, 0xd9, 0x97, 0x24, 0xc5, 0x42, 0x06, 0x69, 0x56, 0x02, 0x3a, 0x3f, 0x74,
	0x30, 0x4f, 0xd5, 0xb2, 0x29, 0x23, 0x54, 0xa2, 0x57, 0x60, 0x5c, 0x11, 0x1a, 0x59, 0x5a, 0x5b,
	0xeb, 0x36, 0x7a, 0x4f, 0xec, 0x5b, 0x27, 0xed, 0x12, 0x3d, 0x26, 0x34, 0xf2, 0x14, 0x14, 0x3d,
	0x87, 0x9d, 0x62, 0xab, 0x2f, 0x30, 0x27, 0x58, 0xf8, 0x57, 0x78, 0x61, 0xe9, 0x6d, 0xad, 0xbb,
	0xe5, 0x6d, 0x17, 0xe5, 0x73, 0x55, 0x1d, 0xe3, 0x05, 0x1a, 0x40, 0x3d, 0x09, 0xe6, 0x38, 0x11,
	0xd6, 0x66, 0x7b, 0xb3, 0x6b, 0xf6, 0x0e, 0xfe, 0xba, 0x5c, 0x51, 0xb1, 0x27, 0x0a, 0x3c, 0xa2,
	0x92, 0x2f, 0xbc, 0x6a, 0x12, 0xed, 0x82, 0x91, 0x13, 0x2a, 0x2d, 0xa3, 0xad, 0x75, 0x8d, 0x93,
	0x0d, 0x4f, 0x65, 0xe8, 0x11, 0xd4, 0x2e, 0x12, 0x16, 0x48, 0xab, 0xd6, 0xd6, 0xba, 0xda, 0xc9,
	0x86, 0x57, 0xa6, 0xad, 0xf7, 0x60, 0xae, 0x2d, 0x41, 0x4d, 0xd8, 0x2c, 0xc8, 0x69, 0x8a, 0x5c,
	0x11, 0xa2, 0x5d, 0xa8, 0x7d, 0x0f, 0x92, 0x1c, 0x57, 0x84, 0xcb, 0xe4, 0x83, 0xfe, 0x4e, 0x1b,
	0xdc, 0xab, 0x3a, 0x9d, 0x5f, 0x3a, 0x6c, 0xbb, 0x34, 0xc6, 0x42, 0x7a, 0xf8, 0x5b, 0x8e, 0x85,
	0x44, 0x2f, 0x60, 0x87, 0x44, 0x38, 0xcd, 0x98, 0xc4, 0x34, 0x5c, 0xf8, 0xab, 0x95, 0x8d, 0xb5,
	0x72, 0xf1, 0xc1, 0xcf, 0xc0, 0xe4, 0x38, 0x63, 0x5c, 0x62, 0xee, 0x93, 0x48, 0xdd, 0x30, 0x06,
	0xfa, 0x91, 0xe6, 0xc1, 0xb2, 0xec, 0x46, 0x68, 0x78, 0x43, 0x95, 0x97, 0x77, 0xa8, 0xf2, 0xc7,
	0xfd, 0x3b, 0x75, 0x39, 0x82, 0x9a, 0x90, 0x01, 0x2f, 0x85, 0x31, 0x7b, 0x2d, 0xbb, 0xf4, 0xdd,
	0x5e, 0xfa, 0x6e, 0xcf, 0x96, 0xbe, 0x7b, 0x25, 0x10, 0xbd, 0x81, 0xfb, 0xcb, 0xb7, 0xa2, 0x64,
	0x33, 0x7b, 0x7b, 0xb7, 0x86, 0x86, 0x15, 0xc0, 0xbb, 0x86, 0xa2, 0xb7, 0x50, 0xcf, 0x0a, 0x77,
	0x84, 0x55, 0x57, 0x74, 0xf7, 0xff, 0x6d, 0xa2, 0x57, 0xa1, 0xff, 0xc3, 0x8a, 0x4e, 0x13, 0x1a,
	0x4b, 0x01, 0x44, 0xc6, 0xa8, 0xc0, 0x07, 0x1f, 0x01, 0x56, 0xaf, 0x10, 0x3d, 0x86, 0x87, 0xee,
	0xd9, 0x97, 0xfe, 0xc4, 0x1d, 0xfa, 0xa7, 0xa3, 0x99, 0xe7, 0x7e, 0xf2, 0xc7, 0xee, 0xd9, 0xb0,
	0xb9, 0x81, 0xb6, 0xa0, 0x36, 0x1c, 0x4d, 0x66, 0xfd, 0xa6, 0x56, 0x84, 0xc7, 0xfd, 0xcf, 0xc7,
	0xa3, 0xa6, 0x3e, 0x70, 0x60, 0x2f, 0x64, 0xe9, 0x1a, 0xed, 0xf2, 0xcf, 0xb3, 0x63, 0x9e, 0x85,
	0x53, 0xed, 0xeb, 0x56, 0xf5, 0x15, 0xd9, 0xfc, 0xa7, 0x6e, 0x4c, 0xce, 0xa7, 0x83, 0x79, 0x5d,
	0xe9, 0xf1, 0xfa, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x70, 0x30, 0xfa, 0xc0, 0xc2, 0x03, 0x00,
	0x00,
}
